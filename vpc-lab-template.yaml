AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template to deploy a secure VPC with public and private subnets,
  an Apache web server, and a private instance, all accessible via Session Manager. 

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Project Configuration"
        Parameters:
          - ProjectName
          - YourFullName
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcCIDR
          - PublicSubnetACIDR
          - PrivateSubnetACIDR
          - PublicSubnetBCIDR
          - PrivateSubnetBCIDR
      - Label:
          default: "EC2 Configuration"
        Parameters:
          - InstanceType
          - KeyName
    ParameterLabels:
      ProjectName:
        default: "Project Name"
      YourFullName:
        default: "Your Full Name"
      VpcCIDR:
        default: "VPC CIDR Block"
      PublicSubnetACIDR:
        default: "Public Subnet A CIDR Block"
      PrivateSubnetACIDR:
        default: "Private Subnet A CIDR Block"
      PublicSubnetBCIDR:
        default: "Public Subnet B CIDR Block"
      PrivateSubnetBCIDR:
        default: "Private Subnet B CIDR Block"
      InstanceType:
        default: "EC2 Instance Type"
      KeyName:
        default: "EC2 Key Pair Name"

Parameters:
  ProjectName:
    Type: String
    Description: A name for the project, used for resource tagging.
    Default: CFN-Secure-VPC-Lab

  YourFullName:
    Type: String
    Default: Michael Okyere Adams
    Description: Your full name, which will be displayed on the web server.
    MinLength: 3

  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC.

  PublicSubnetACIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for Public Subnet in AZ1.

  PrivateSubnetACIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for Private Subnet in AZ1.

  PublicSubnetBCIDR:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR block for Public Subnet in AZ2.

  PrivateSubnetBCIDR:
    Type: String
    Default: 10.0.4.0/24
    Description: CIDR block for Private Subnet in AZ2.

  InstanceType:
    Type: String
    Default: t3.micro
    Description: EC2 instance type for both web and private servers.
    AllowedValues:
      - t3.micro

  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: The latest Amazon Linux 2 AMI ID.

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances.

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-VPC"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-IGW"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref LabVPC
      InternetGatewayId: !Ref InternetGateway

  
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: !Ref PublicSubnetACIDR
      AvailabilityZone: !Select [0, !GetAZs ''] 
      MapPublicIpOnLaunch: 'true' 
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PublicSubnet-A"


  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: !Ref PublicSubnetBCIDR
      AvailabilityZone: !Select [1, !GetAZs ''] 
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PublicSubnet-B"

  
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: !Ref PrivateSubnetACIDR
      AvailabilityZone: !Select [0, !GetAZs ''] 
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PrivateSubnet-A"

  
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: !Ref PrivateSubnetBCIDR
      AvailabilityZone: !Select [1, !GetAZs ''] 
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PrivateSubnet-B"


  EIPforNATGateway:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc 
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-NAT-EIP"

  
  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachGateway 
    Properties:
      AllocationId: !GetAtt EIPforNATGateway.AllocationId
      SubnetId: !Ref PublicSubnetA 
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-NATGateway"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LabVPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-Public-RT"


  PublicInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: AttachGateway 

 
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LabVPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-Private-RT"

 
  PrivateNATRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway 
    DependsOn: NATGateway 

  
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

  
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore 
      Path: /
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-EC2-SSM-Role"

  
  SSMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role
      InstanceProfileName: !Sub "${ProjectName}-SSM-InstanceProfile"

  
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP/SSH access to web server
      VpcId: !Ref LabVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 
      SecurityGroupEgress:
        - IpProtocol: -1 
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0 
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-WebServer-SG"

 
  PrivateInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH/ICMP from web server and all outbound.
      VpcId: !Ref LabVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !GetAtt WebServerSecurityGroup.GroupId
        - IpProtocol: icmp 
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId: !GetAtt WebServerSecurityGroup.GroupId 
      SecurityGroupEgress:
        - IpProtocol: -1 
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0 
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PrivateInstance-SG"

  
  PublicWebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnetA 
      IamInstanceProfile: !Ref SSMInstanceProfile
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello from my Web Server! My name is ${YourFullName}</h1>" > /var/www/html/index.html
          echo "Web server deployed successfully by CloudFormation!" >> /tmp/user-data.log
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PublicWebServer"

  
  PrivateInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref PrivateSubnetA 
      IamInstanceProfile: !Ref SSMInstanceProfile
      SecurityGroupIds:
        - !Ref PrivateInstanceSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PrivateInstance"

Outputs:
  VpcId:
    Description: The ID of the newly created VPC.
    Value: !Ref LabVPC

  PublicWebServerPublicIp:
    Description: The Public IP address of the Apache Web Server.
    Value: !GetAtt PublicWebServer.PublicIp

  PublicWebServerDNS:
    Description: The Public DNS name of the Apache Web Server.
    Value: !GetAtt PublicWebServer.PublicDnsName

  WebServerURL:
    Description: The URL for the Apache Web Server.
    Value: !Sub "http://${PublicWebServer.PublicDnsName}"

  PrivateInstanceId:
    Description: The ID of the private EC2 instance.
    Value: !Ref PrivateInstance
